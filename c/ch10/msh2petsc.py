#!/usr/bin/env python3
#
# (C) 2018-2020 Ed Bueler
#
# Create PETSc binary files .vec,.is from ascii .msh mesh file generated by Gmsh.
# This script is based on reading the ASCII format documented at
#   http://gmsh.info/doc/texinfo/gmsh.html#MSH-file-format

# example: put PETSc Vec with locations (node coordinates x,y) in meshes/trap.vec
# and PETSc ISs (e,bfn,s,bfs) in meshes/trap.is
#    $ make petscPyScripts
#    $ gmsh -2 meshes/trap.geo
#    $ ./msh2petsc.py meshes/trap.msh

import numpy as np
import sys

# debug print
def dprint(debug,s):
    if debug:
        print(s)

def fail(k,s):
    print('ERROR: %s ... stopping' % s)
    sys.exit(k)

def check_mesh_format(filename):
    MFread = False
    numsread = False
    with open(filename, 'r') as mshfile:
        for line in mshfile:
            line = line.strip()  # remove leading and trailing whitespace
            if line: # only look at nonempty lines
                if line == '$MeshFormat':
                    if MFread:
                        print('WARNING: "$MeshFormat" repeated')
                    MFread = True
                elif line.split(' ') == ['2.2','0','8']:
                    if numsread:
                        print('WARNING: Gmsh format version number etc. repeated')
                    numsread = True
                elif line == '$EndMeshFormat':
                    continue
        return (MFread and numsread)

def read_physical_names(filename):
    PNread = False
    nPN = 0
    physical = {}   # empty dictionary
    with open(filename, 'r') as mshfile:
        for line in mshfile:
            line = line.strip()  # remove leading and trailing whitespace
            if line: # only look at nonempty lines
                if line == '$PhysicalNames':
                    PNread = True
                elif line == '$EndPhysicalNames':
                    break
                elif PNread:
                    ls = line.split(' ')
                    if nPN == 0 and len(ls) == 1:
                        try:
                            nPN = int(ls[0])
                        except ValueError:
                            fail(2,'nPN not an integer')
                    else:
                        assert (len(ls) == 3), 'expected three items on line'
                        try:
                            dim = int(ls[0])
                        except ValueError:
                            fail(2,'dim not an integer')
                        try:
                            num = int(ls[1])
                        except ValueError:
                            fail(2,'num not an integer')
                        physical[ls[2].strip('"').lower()] = num
    assert (nPN == len(physical)), 'expected number of physical names does not equal number read'
    for key in ['dirichlet','neumann','interior']:
        assert (key in physical), 'no key "%s" in dictionary' % key
    return physical

def read_nodes(filename):
    Nodesread = False
    EndNodesread = False
    N = 0   # number of nodes
    count = 0
    coords = []
    with open(filename, 'r') as mshfile:
        for line in mshfile:
            line = line.strip()  # remove leading and trailing whitespace
            if line: # only look at nonempty lines
                if line == '$Nodes':
                    assert (not Nodesread), '"$Nodes" repeated'
                    Nodesread = True
                elif line == '$EndNodes':
                    assert (Nodesread), '"$EndNodes" before "$Nodes"'
                    assert (len(coords) >= 2), '"$EndNodes" reached before any nodes read'
                    assert (count == N), 'N does not agree with index'
                    break  # apparent success reading the nodes
                elif Nodesread:
                    ls = line.split(' ')
                    if len(ls) == 1:
                        assert (N == 0), 'N found again but already read'
                        try:
                            N = int(ls[0])
                        except ValueError:
                            fail(7,'N not an integer')
                        assert (N > 0), 'N invalid'
                        coords = np.zeros(2*N)  # allocate space for nodes
                    else:
                        assert (N > 0), 'expected to read N by now'
                        assert (len(ls) == 4), 'expected to read four values on node line'
                        try:
                            rcount = int(ls[0])
                        except ValueError:
                            fail(10,'node index not an integer')
                        count += 1
                        assert (count == rcount), 'unexpected (noncontiguous?) node indexing'
                        try:
                            xy = [float(s) for s in ls[1:3]]
                        except ValueError:
                            fail(12,'could not convert node coordinates to float')
                        coords[2*(count-1):2*count] = xy            
    assert (2*N == len(coords)), 'coords should have length 2N'
    return N,coords


def read_elements(filename,N,phys):
    Elementsread = False
    NE = 0   # number of Elements (in Gmsh sense; both triangles and boundary segments)
    tri = []
    ns = []
    bf = np.zeros(N,dtype=int)   # zero for interior
    with open(filename, 'r') as mshfile:
        for line in mshfile:
            line = line.strip()  # remove leading and trailing whitespace
            if line: # only look at nonempty lines
                if line == '$Elements':
                    assert (not Elementsread), '"$Elements" repeated'
                    Elementsread = True
                elif line == '$EndElements':
                    assert (Elementsread), '"$EndElements" before "$Elements"'
                    assert (len(tri) > 0), 'no triangles read'
                    break  # apparent success reading the elements
                elif Elementsread:
                    ls = line.split(' ')
                    if len(ls) == 1:
                        assert (NE == 0), 'NE found again but already read'
                        try:
                            NE = int(ls[0])
                        except ValueError:
                            fail(3,'NE not an integer')
                        assert (NE > 0), 'NE invalid'
                    else:
                        assert (NE > 0), 'expected to read NE by now'
                        assert (len(ls) == 7 or len(ls) == 8), 'expected to read 7 or 8 values on element line'
                        try:
                            dim = int(ls[1])
                        except ValueError:
                            fail(3,'dim not an integer')
                        assert (dim == 1 or dim == 2), 'dim not 1 or 2'
                        try:
                            etype = int(ls[3])
                        except ValueError:
                            fail(3,'etype not an integer')
                        if dim == 2 and etype == phys['interior'] and len(ls) == 8:
                            # reading a triangle
                            try:
                                thistri = [int(s) for s in ls[5:8]]
                            except:
                                fail(3,'unable to convert triangle vertices to integers')
                            # change to zero-indexing
                            tri.append(np.array(thistri,dtype=int) - 1)
                        elif dim == 1 and len(ls) == 7:
                            try:
                                ends = [int(s) for s in ls[5:7]]
                            except:
                                fail(3,'unable to convert segment ends to integers')
                            if etype == phys['dirichlet']:
                                # reading a Dirichlet boundary segment; note zero-indexing
                                bf[np.array(ends,dtype=int) - 1] = 2
                            elif etype == phys['neumann']:
                                # reading a Neumann boundary segment; note zero-indexing
                                ns.append(np.array(ends,dtype=int) - 1)
                                ends = np.array(ends,dtype=int) - 1
                                for j in range(2):
                                    if bf[ends[j]] == 0:
                                        bf[ends[j]] = 1
                            else:
                                fail(3,'should not be here: dim=1 and 7 entries but not etype')
                        else:
                            fail(3,'should not be here: neither triangle or boundary segment')
    return NE,np.array(tri).flatten(),bf,np.array(ns).flatten()

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description= \
        'Converts .msh ASCII file from Gmsh into PETSc binary files .vec,.is.')
    # required positional filename
    parser.add_argument('-v', default=False, action='store_true',
                        help='verbose output for debugging')
    parser.add_argument('inname', metavar='FILE',
                        help='input file name with .msh extension')
    args = parser.parse_args()

    import PetscBinaryIO  # need link to ${PETSC_DIR}/lib/petsc/bin/PetscBinaryIO.py

    if args.inname.split('.')[-1] == 'msh':
        outroot = '.'.join(args.inname.split('.')[:-1]) # strip .msh
    else:
        print('WARNING: expected .msh extension for input file')
    vecoutname = outroot + '.vec'
    isoutname = outroot + '.is'

    dprint(args.v,'checking for MeshFormat in input file %s ...' % args.inname)
    if not check_mesh_format(args.inname):
        print('ERROR: mesh format not as expected ... stopping')
        sys.exit(1)

    print('  reading physical names ...')
    phys = read_physical_names(args.inname)
    dprint(args.v,phys)

    print('  reading node coordinates ...')
    N,xy = read_nodes(args.inname)
    dprint(args.v,'N=%d' % N)
    dprint(args.v,xy)

    print('  writing N=%d node coordinates as PETSc Vec to %s ...' \
          % (N,vecoutname))
    petsc = PetscBinaryIO.PetscBinaryIO()
    petsc.writeBinaryFile(vecoutname,[xy.view(PetscBinaryIO.Vec),])

    print('  reading element tuples ...')
    NE,e,bf,ns = read_elements(args.inname,N,phys)
    assert (len(e) % 3 == 0), 'element index list length not 3 K'
    K = len(e) / 3
    assert (len(bf) == N), 'boundary flag list not length N'
    assert (len(ns) % 2 == 0), 'Neumann segment index list length not 2 P'
    P = len(ns) / 2
    if (P == 0):
        print('WARNING: P=0 so writing a bogus negative-valued Neumann boundary segment')
        ns = np.array([-1,-1],dtype=int)
    dprint(args.v,'NE=%d' % NE)
    dprint(args.v,e)
    dprint(args.v,bf)
    dprint(args.v,ns)
    print('  writing K=%d elements, N=%d boundary flags, and P=%d Neumann segments' \
          % (K,N,P))
    print('    as PETSc IS to %s ...' % isoutname)
    IS = PetscBinaryIO.IS
    petsc.writeBinaryFile(isoutname,[e.view(IS),bf.view(IS),ns.view(IS)])

